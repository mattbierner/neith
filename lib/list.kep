/**
 * @fileOverview Zippers for lists.
 */
package (
    listZipper
    listZipperIn
    arrayZipper)
with
    import 'nu-stream::stream' {
        isStream
        from
        map
        toArray
        NIL},
    import './zipper' {
        zipper
        setLefts
        setRights}
in {

/* Zipper
 ******************************************************************************/
/**
 * Create zipper for a list
 * 
 * Allows traversing down into streams contained in the stream.
 * 
 * @param s Stream starting point for the zipper. Call `zipper.down` to enter
 *   into the stream and `zipper.up` to rebuild it.
 */
listZipper = let
    children = \s -> ?isStream s : s : NIL,
    construct = \_ children -> children
in
    zipper@(
        children,
        construct);

/**
 * Create a list zipper with given surroundings.
 * 
 * Because `zipper.down` always attempts to move to its leftmost child,
 * it cannot be used for bidirectionally infinite streams. This allows starting
 * in such streams directly.
 * 
 * @param lefts Stream of left siblings in reverse order.
 * @param focus Focus of the zipper.
 * @param rights Stream of right siblings.
 */
listZipperIn = \lefts, focus, rights ->
    listZipper(focus)
        |> setLefts@lefts
        |> setRights@rights;

/**
 * Create a zipper for an array.
 * 
 * Same behavior as list but outputs arrays.
 * 
 * @param arr Array starting point.
 */
arrayZipper = let
    children = \s -> ?Array.isArray s : from s : NIL,
    construct = \_ children -> toArray(children)
in
    zipper@(
        children,
        construct);

}