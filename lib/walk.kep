/**
 * @fileOverview Walking operations 
 */
package (
    forChildren
    
    walk
    postWalk
    preWalk)
with
    import './zipper' zipper#{
        isLeaf
        up
        down
        right
        seq
        whilst}
in {

var id = \x -> x;

/**
 * Visit all children of the current context with function `f`.
 * 
 * @param f Zipper operation called on each child, left to right.
 * @param ctx
 */
forChildren = \f ctx ->
    ?!ctx || isLeaf ctx
        :ctx
        :ctx
            |> down
            |> whilst @ (right, seq(f, right))
            |> f
            |> up;

/**
 * Visit all descendants in depth first order.
 * 
 * @param pre Zipper operation called before visiting descendants. This may 
 *   edit the node to change the descendants that will be visited.
 * @param post Zipper operation called after all of a node's descendants have
 *   been visited.
 */
walk = \pre post ctx -> let
    walkImpl := \ctx -> 
        post <| forChildren(walkImpl, pre ctx)
in
    walkImpl(ctx);

/**
 * Post, depth first traversal of zipper.
 * 
 * @see walk
 * 
 * @param post
 * @param ctx
 */
postWalk = \post ctx ->
    walk(id, post, ctx);

/**
 * Pre, depth first traversal of zipper
 * 
 * @see walk
 * 
 * @param pre
 * @param ctx
 */
preWalk = \pre ctx ->
    walk(pre, id, ctx);

}