/**
 * @fileOverview
 */
package (
    Loc,
    Context,
    
// State
    path,
    lefts,
    rights,
    
// Basic Movement
    up,
    down,
    left,
    right,

// Compound Movement
    root,
    leftmost,
    rightmost,
    leftLeaf,
    rightLeaf,
    
    nextUpDfs,
    nextDfs,
    prevDfs,
    
// Labeled Movement
    child,
    nthChild,
    sibling,
    
// Editing
    getNode,
    setNode,
    modifyNode,
    removeNode,
    insertLeft,
    insertRight,
    insertChild,
    appendChild,

// Zipper Creation
    zipper,
    treeZipper)
{


var call = Function.prototype.bind.bind(Function.prototype.call);

var concat = call(Array.prototype.concat);
var map = call(Array.prototype.map);
var slice = call(Array.prototype.slice);
var reduce = call(Array.prototype.reduce);

/* Context
 ******************************************************************************/
var Pair = \key, value -> ({'key': key, 'value': value});

/* Context
 ******************************************************************************/
/**
 * 
 */
Context = function(loc, getChildren, getChild, constructNode) {
    this.loc = loc;
    this.getChildren = getChildren;
    this.getChild = getChild;
    this.constructNode = constructNode;
};

Context.setLoc = \ctx, loc ->
    new Context(
        loc,
        ctx.getChildren,
        ctx.getChild,
        ctx.constructNode);

/* Loc
 ******************************************************************************/
// Loc
////////////////////////////////////////
/**
 * 
 */
Loc = function(focus, parent, path, left, right) {
    this.focus = focus;
    this.parent = parent;
    this.path = path;
    this.left = left;
    this.right = right;
};

Loc.setFocus = \loc, focus ->
    new Loc(
        focus,
        loc.parent,
        loc.path,
        loc.left,
        loc.right);

Loc.setLeft = \loc, left ->
    new Loc(
        loc.focus,
        loc.parent,
        loc.path,
        left,
        loc.right);

Loc.setRight = \loc, right ->
    new Loc(
        loc.focus,
        loc.parent,
        loc.path,
        loc.left,
        right);

/* Internal operations
 ******************************************************************************/
var getLoc = \ctx -> ctx.loc;

var setLoc = \ctx, loc -> Context.setLoc(ctx, loc);

var modifyLoc = \ctx, f -> setLoc(ctx, f(getLoc(ctx)));

var setLefts = \ctx, ls -> modifyLoc(ctx, \loc -> Loc.setLeft(loc, ls));

var setRights = \ctx, rs -> modifyLoc(ctx, \loc -> Loc.setRight(loc, rs));

var modifyLefts = \ctx, f -> setLefts(ctx, f(ctx.loc.right));

var modifyRights = \ctx, f -> setRights(ctx, f(ctx.loc.right));

var getFocus = \ctx -> getLoc(ctx).focus;

/* Query
 ******************************************************************************/
/**
 * Get ordered path to the current node.
 * 
 * Paths are stored in reverse order, with the first item being the edge leading
 * from the current node's parent to the current node.
 */
path = \ctx -> getLoc(ctx).path;

/**
 * Get ordered list of the current node's left siblings.

 */
lefts = \ctx -> getLoc(ctx).left;

/**
 * Get ordered list of the current node's right siblings.
 */
rights = \ctx -> getLoc(ctx).right;

/* 
 ******************************************************************************/
var getChildren = \ctx -> ctx.getChildren(getFocus(ctx));

var hasChildren = \ctx -> !!getChildren(ctx).length;

var getChild = \ctx, key -> ctx.getChild(getFocus(ctx), key);

var getParent = \ctx -> getLoc(ctx).parent;

var hasParent = \ctx -> getLoc(ctx).parent !== null;

var pushPath = \ctx, x -> concat([x], path(ctx));

var popPath = \ctx -> slice(path(ctx), 1);

var construct = \ctx, parent, children ->
    ctx.constructNode(
        parent,
        children.map(\x -> x.key),
        children.reduce(\p, c -> {
            p[c.key] = c.value;
            return p;
        }, {}));

var constructParent = \ctx -> 
    construct(ctx,
        getParent(ctx).focus,
        concat(
            ctx.loc.left,
            Pair(ctx.loc.path[0], ctx.loc.focus),
            ctx.loc.right));

/* Node Predicates
 ******************************************************************************/
/**
 * Is the current node a root node?
 */
var isRoot = hasParent \> (!);

/**
 * Is the current node a child node?
 */
var isChild = hasParent;

/**
 * Is the current node a leaf node?
 */
var isLeaf = hasChildren \> (!);

/**
 * Is the current node the leftmost of its siblings?
 */
var isFirst = \ctx -> lefts(ctx).length === 0;

/**
 * Is the current node the rightmost of its siblings?
 */
var isLast = \ctx -> rights(ctx).length === 0;

/* Basic Movement
 ******************************************************************************/
/**
 * Move to the parent of the current node.
 * 
 * Returns null if the current node has no parent.
 */
up = \ctx ->
    (!hasParent(ctx) ? null :
        modifyLoc(ctx, \loc ->
            Loc.setFocus(
                getParent(ctx),
                constructParent(ctx))));

/**
 * Move downwards to the leftmost child of the current node.
 * 
 * Returns null if the current node has no children.
 * 
 * This is an order dependent operation.
 */
down = \ctx ->
    (!hasChildren(ctx) ? null :
        let
            children = getChildren(ctx),
            child = children[0]
        in
            setLoc(
                ctx,
                new Loc(
                    getChild(ctx, child),
                    getLoc(ctx),
                    pushPath(ctx, child),
                    [],
                    children.slice(1).map(\x -> Pair(x, getChild(ctx, x))))));

/**
 * Move left to the next left sibling of the current node.
 * 
 * Returns null if there are no left siblings.
 * 
 * This is an order dependent operation.
 */
left = \ctx -> let
    ls = lefts(ctx),
    l = ls[0]
in
    (!ls.length ? null :
        Context.setLoc(ctx, new Loc(
            l.value,
            getParent(ctx),
            concat([l.key], slice(path(ctx), 1)),
            slice(ctx.loc.left, 1),
            concat([Pair(path(ctx)[0], getFocus(ctx))], ctx.loc.right))));

/**
 * Move right to the next right sibling of the current node.
 * 
 * Returns null if there are no right siblings.
 * 
 * This is an order dependent operation.
 */
right = \ctx -> let
    rs = rights(ctx),
    r = rs[0]
in
    (!rs.length ? null :
        Context.setLoc(ctx, new Loc(
            r.value,
            getParent(ctx),
            concat([r.key], slice(path(ctx, 1))),
            concat(ctx.loc.left, Pair(path(ctx)[0], getFocus(ctx))),
            slice(ctx.loc.right, 1))));

/* Compound Movement
 ******************************************************************************/
/**
 * Move to the root of the tree.
 * 
 * Returns the current node if it is the root.
 */
root = \ctx ->
    let parent = up(ctx) in
        (parent ?
            root(parent) :
            ctx);

/**
 * Move to the leftmost sibling of the current node.
 * 
 * Returns the current node if it has no left siblings.
 */
leftmost = \ctx ->
    let l = left(ctx) in
        (l ? leftmost(l) : ctx);

/**
 * Move to the rightmost sibling of the current node.
 * 
 * Returns the current node if it has no right siblings.
 */
rightmost = \ctx ->
    let r = right(ctx) in
        (r ? rightmost(r) : ctx);

/**
 * Move to the leftmost leaf of the current node.
 * 
 * Returns the current node if it has no children.
 */
leftLeaf = \ctx ->
    let child = down(ctx) in
        (child ?
            leftLeaf(child) :
            ctx);

/**
 * Move to the rightmost leaf of the current node.
 * 
 * Returns the current node if it has no children.
 */
rightLeaf = \ctx ->
    let child = down(ctx) in
        (child ?
            rightLeaf(rightmost(child)) :
            ctx);

/**
 * Move to the next node in a DFS excluding the current node's children.
 * 
 * Returns null if at root.
 */
nextUpDfs = \ctx ->
    let parent = up(ctx) in 
        (parent ?
            (right(parent) || nextUpDfs(parent)) :
            parent);

nextDfs = \ctx ->
    down(ctx) || right(ctx) || nextUpDfs(ctx);

prevDfs = \ctx ->
    let l = left(ctx) in
        (l ?
            rightLeaf(l) : 
            up(ctx));
    
/* Labeled Movement
 ******************************************************************************/
/**
 * Move to the nth child of current node.
 * 
 * Returns null if no such child exists.
 * 
 * This is an order dependant operation.
 */
nthChild = let
    goRight = \ctx, count ->
        (count <= 0 ?
            ctx :
            goRight(right(ctx), count - 1))
in
    \ctx, index ->
        let child = down(ctx) in
            (child ?
                goRight(child, index) :
                child);

/**
 * Move to the child from `edge` of current node.
 * 
 * Returns null if no such child exists.
 * 
 * This is an order independent operation.
 */
child = \ctx, edge -> down(ctx);

/**
 * Move to the sibling with `edge` leading from the current node's parent.
 * 
 * Returns null if no such sibling exists. Returns the current node if `edge`
 * leads to it.
 * 
 * This is an order independent operation.
 */
sibling = \ctx, edge ->
    child(up(ctx), edge);

/* Editing
 ******************************************************************************/
/**
 * Get the current node.
 */
getNode = getFocus;

/**
 * Replace current node with `node`.
 */
setNode = \ctx, node ->
    modifyLoc(
        ctx,
        \loc -> Loc.setFocus(loc, node));

/**
 * Modify current node with function `f` and replace it with result.
 */
modifyNode = \ctx, f ->
    setNode(ctx, f(getNode(ctx)));

/**
 * Removes the current node. Moves to either the first right sibiling, or the
 * first right sibiling or the parent.
 * 
 * Returns null if the current node has no parent.
 */
removeNode = \ctx ->
    (!hasParent(ctx) ? null :
        (!isLast(ctx) ?
            modifyLefts(
                right(ctx),
                \lefts -> slice(lefts, 0 , lefts.length - 2)) :
            (!isFirst(ctx) ?
                setRights(left(ctx), []) :
                construct(ctx, ctx.loc.parent, []))));

/**
 * Insert a sibling to the left of the current node. Stays on the current node.
 */
insertLeft = \ctx, name, node ->
    Context.setLoc(ctx, new Loc(
        getFocus(ctx),
        getParent(ctx),
        path(ctx),
        concat(ctx.loc.left, Pair(name, node)),
        ctx.loc.right));

/**
 * Insert a sibling to the right of the current node. Stays on the current node.
 */
insertRight;

/**
 * Insert to the right of the current node. Stays on the current node.
 */
insertChild = \ctx, name, node ->
    up(
        insertLeft(
            down(ctx),
            name,
            node));

/**
 * 
 */
appendChild = \ctx, name, node ->
    up(
        insertRight(
            rightmost(down(ctx)),
            name,
            node));

/* Zipper
 ******************************************************************************/
/**
 * Create a generic zipper.
 * 
 * @param edges Function taking a node and returning an array of edges
 *     the children of this node.
 * @param getChild Function taking a node and key and returning the child.
 * @param constructNode Function taking a node and map of keys to children and returns
 *    a new node from these children.
 * @param focus Starting point and current context for the zipper.
 */
zipper = \edges, getChild, constructNode, focus ->
    new Context(
        new Loc(focus, null, [], [], []),
        edges,
        getChild,
        constructNode);

/**
 * Create a zipper for a tree with child edges stored on the node.
 */
treeZipper = let
    getChild = \obj, key -> obj[key]
in
    \edges, construct, root ->
        zipper(
            edges,
            getChild,
            construct,
            root);


}