/**
 * @fileOverview Core zipper data structure and generic operations.
 */
package (
// Node Queries
    extract
    children
    parent
    path
    lefts
    rights

// Node Predicates
    hasChildren
    hasParent
    isRoot
    isChild
    isLeaf
    isFirst
    isLast

// Basic Movement
    up
    down
    left
    right

// Compound Movement
    whilst
    recur
    
    seq
    any
    
    root
    leftmost
    rightmost
    leftLeaf
    rightLeaf
    
    nextUpDfs
    nextDfs
    prevDfs
    
// Editing
    replace
    modify
    remove
    setLefts
    modifyLefts
    setRights
    modifyRights
    insertLeft
    insertRight
    insertChild
    appendChild

    detach
    
// Zipper Creation
    zipper)
with
    import 'nu-stream::stream' {
        append
        cons
        first
        rest
        isEmpty
        map
        NIL
        reverse
        stream},
    import 'nu-stream::select' {
        skip}
in {

var reduceRight = Function.prototype.call.bind(Array.prototype.reduceRight);

var flip := \f -> \x y -> f(y, x);

// Context
////////////////////////////////////////
var Context := function \loc children constructNode =self -> {
    self.loc = loc;
    self.children = children;
    self.constructNode = constructNode;
};

Context.prototype.setLoc = \loc =self->
    new Context(
        loc,
        self.children,
        self.constructNode);

// Focus
////////////////////////////////////////
var Focus := function \focus dirty children  =self -> {
    self.focus = focus;
    self.dirty = dirty;
    self.children = children; // cached children value.
};

Focus.prototype.setDirty = \dirty =self->
    new Focus(
        self.focus,
        dirty,
        ?dirty : null : self.children); // invalidate

Focus.prototype.setChildren = \children =self->
    new Focus(
        self.focus,
        self.dirty,
        children);

var focusList := map @ (new, Focus);

var unFocusList := map @ (.focus);

// Loc
////////////////////////////////////////
var Loc := function\focus parent left right =self -> {
    self.focus = focus;
    self.parent = parent;
    self.left = left;
    self.right = right;
};

Loc.empty = new Loc(null, null, NIL, NIL);

Loc.prototype.setFocus = \focus =self->
    new Loc(
        focus,
        self.parent,
        self.left,
        self.right);

Loc.prototype.setParent = \parent =self->
    new Loc(
        self.focus,
        parent,
        self.left,
        self.right);
    
Loc.prototype.setLeft = \left =self->
    new Loc(
        self.focus,
        self.parent,
        left,
        self.right);

Loc.prototype.setRight = \right =self->
    new Loc(
        self.focus,
        self.parent,
        self.left,
        right);

var setSurround = \loc left focus right ->
    new Loc(
        focus,
        loc.parent,
        left,
        right);

var updateChildren := \loc c ->
    ?loc.focus.children
        :loc
        :loc.setFocus(loc.focus.setChildren(c));

/* Internal operations
 ******************************************************************************/
var getLoc := \ctx -> ctx.loc;

var setLoc := \ctx loc -> ctx.setLoc(loc);

var modifyLoc = \ctx f -> setLoc(ctx, f(getLoc(ctx)));

var getFocus = getLoc \> (.focus);

var setFocus = \ctx f -> modifyLoc(ctx, \loc -> loc.setFocus(f));

var getParent := getLoc \> (.parent); // Current parent, not reconstructed one. May be dirty.

var getLefts := getLoc \> (.left);

var getRights := getLoc \> (.right);

/* Reconstruction
 ******************************************************************************/
var dirty := getFocus \> (.dirty);

var markLocDirty := \loc -> let
    parent = loc.parent
in
    ?parent
        :loc.setParent(parent.setFocus(parent.focus.setDirty(true)))
        :loc;

var markDirty := \ctx ->
    setLoc(ctx, markLocDirty(ctx.loc));

var construct = \ctx parent children ->
    new Focus(
        ctx.constructNode(parent, children),
        false,
        children);

var constructParent = \ctx -> 
    construct(ctx,
        getParent(ctx).focus.focus,
        append(
            reverse <| lefts ctx,
            cons(extract ctx, NIL),
            rights ctx));

var moveParent := \ctx -> let
    parent = getParent ctx
in
    ?parent && parent.focus.dirty
        :markLocDirty <| parent.setFocus(constructParent(ctx))
        :parent;

/* Queries
 ******************************************************************************/
/**
 * Get the focus element.
 * 
 * @param ctx
 */
extract := getFocus \> (.focus);

/**
 * Get ordered path of nodes leading to, and including, the focus.
 * 
 * @return Stream of path, may be infinite.
 */
path := \ctx ->
    ?ctx
        :stream(extract ctx, \-> path (up ctx))
        :NIL;
/**
 * Get ordered list of the focus's left siblings.
 * 
 * The left path is kept in reverse order, with the first element being the
 * element next to the focus.
 * 
 * @return Stream, may be infinite.
 */
lefts := getLefts \> unFocusList;

/**
 * Get ordered list of the focus's right siblings.
 * 
 * @return Stream, may be infinite.
 */
rights := getRights \> unFocusList;

/**
 * Get the parent of the focus.
 */
parent := moveParent \> extract;

/**
 * Get order list of focus's children.
 * 
 * @return Stream of children, may be infinite.
 */
children = \ctx ->
    (ctx.loc.focus.children || ctx.children(extract ctx));

/* Node Predicates
 ******************************************************************************/
/**
 * Does the focus have any children?
 */
hasChildren = (!) <\ isEmpty <\ children;

/**
 * Does the focus have a parent?
 */
hasParent = getParent \> (!==, null);

/**
 * Is the focus a root node?
 */
isRoot = (!) <\ hasParent;

/**
 * Is the focus a child node?
 */
isChild = hasParent;

/**
 * Is the focus a leaf node?
 */
isLeaf = (!) <\ hasChildren;

/**
 * Is the focus the leftmost of its siblings?
 */
isFirst = getLefts \> isEmpty;

/**
 * Is the focus the rightmost of its siblings?
 */
isLast = getRights \> isEmpty;

/* Basic Movement
 ******************************************************************************/
/**
 * Move to the parent of the focus.
 * 
 * Returns null if the focus has no parent.
 */
up = \ctx ->
    ?isRoot ctx
        :null
    :ctx.setLoc(moveParent ctx);

/**
 * Move to the leftmost child of the focus.
 * 
 * Returns null if the focus has no children.
 */
down = \ctx -> let
    cs = children ctx
in
    ?isEmpty cs
        :null
    :setLoc(ctx,
        new Loc(
            new Focus(first cs),
            updateChildren(getLoc ctx, cs),
            NIL,
            focusList <| rest cs));

/**
 * Move to the left sibling of the focus.
 * 
 * Returns null if there are no left siblings.
 */
left = \ctx ->
    ?isFirst ctx
        :null
    :let ls = getLefts ctx in
        setLoc(ctx,
            setSurround(getLoc ctx, 
                rest ls,
                first ls,
                cons(getFocus ctx, getRights ctx)));

/**
 * Move to the right sibling of the focus.
 * 
 * Returns null if there are no right siblings.
 */
right = \ctx ->
    ?isLast ctx
        :null
    :let rs = getRights ctx in
        setLoc(ctx,
            setSurround(getLoc ctx,
                cons(getFocus ctx, getLefts ctx),
                first rs,
                rest rs));

/* Compound Movement
 ******************************************************************************/
/**
 * Run `op` while `pred` holds true, returning the last result.
 * 
 * @param pred Predicate operation taking current context.
 * @param op Movement operation that updates the context.
 * @param ctx
 */
whilst = \pred op ctx ->
    ?ctx && pred ctx
        :whilst(pred, op, op ctx)
        :ctx;

/**
 * Run `op` until it fails, returning the last successful result.
 * 
 * @param op Movement operation mapping a context to a new context or null.
 * @param ctx
 */
recur = \op ctx ->
    let next = op ctx in
        ?next
            :recur(op, next)
            :ctx;

/**
 * Perform a set of operations left to right. Returns result from first to fail or last operations.
 * 
 * Takes list of operations as arguments.
 */
seq = let
    and = \p c ->
        \ctx ->
            (ctx && let next = c ctx in (next && p next))
in
    \ops(...) ->
        reduceRight(ops, and);

/**
 * Perform a set of operations left to right. Returns result from first to succeed.
 * 
 * Takes list of operations as arguments.
 */
any = let
    or = \p c ->
        \ctx ->
            (ctx && (c ctx || p ctx))
in
    \ops(...) ->
        reduceRight(ops, or);

/**
 * Move to the root of the tree.
 * 
 * Returns the focus if it is the root.
 */
root := recur @ up;

/**
 * Move to the leftmost sibling of the focus.
 * 
 * Returns the focus if it has no left siblings.
 */
leftmost := recur @ left;

/**
 * Move to the rightmost sibling of the focus.
 * 
 * Returns the focus if it has no right siblings.
 */
rightmost := recur @ right;

/**
 * Move to the leftmost leaf of the focus.
 * 
 * Returns the focus if it has no children.
 */
leftLeaf := recur @ down;

/**
 * Move to the rightmost leaf of the focus.
 * 
 * Returns the focus if it has no children.
 */
rightLeaf := recur @ seq(down, rightmost);

/**
 * Move to the next node in a DFS excluding the focus's children.
 * 
 * Returns null if at root.
 */
nextUpDfs = \ctx ->
    let parent = up ctx in 
        ?parent
            :(right parent || nextUpDfs parent)
            :parent;

/**
 * Move to the next node in a DFS traversal.
 */
nextDfs := any(down, right, nextUpDfs);

/**
 * Move to the previous node in a DFS traversal.
 */
prevDfs := \ctx ->
    let l = left ctx in
        ?l
            :rightLeaf l
            :up ctx;

/* Editing
 ******************************************************************************/
/**
 * Replace focus with `node`.
 * 
 * @param node Replacement.
 * @param ctx
 */
replace := \node ctx ->
    markDirty <| setFocus(ctx, new Focus(node));

/**
 * Modify focus with function `f` and replace it with result.
 */
modify = \f, ctx ->
    replace(
        f(extract ctx),
        ctx);

/**
 * Removes the focus.
 * 
 * Moves to either the first right sibling, or the left sibling, or the parent.
 * 
 * Returns null if the focus has no parent.
 */
remove = \ctx ->
    ?isLast ctx
        :?isFirst ctx
            :?hasParent ctx : setLoc(ctx, getParent(ctx).setFocus(construct(ctx, getParent(ctx), NIL))) : null
            :setRights(NIL, left ctx)
        :modifyLefts(
            skip@1,
            right ctx);

/**
 * Set the lefts of the focus.
 * 
 * @param ls Stream of lefts. Is in reversed order with the first element being
 *   the one next to the focus.
 * @param ctx
 */
setLefts = \ls ctx ->
    markDirty <| modifyLoc(ctx, \loc -> loc.setLeft(focusList ls));

/**
 * Modify the current lefts of the focus.
 * 
 * @param  f Mapping current lefts to new lefts.
 * @param ctx
 */
modifyLefts = \f ctx ->
    setLefts(f(lefts ctx), ctx);

/**
 * Set the rights of the focus.
 * 
 * @param ls Stream of rights
 * @param ctx
 */
setRights = \rs ctx ->
    markDirty <| modifyLoc(ctx, \loc -> loc.setRight(focusList rs));

/**
 * Modify the rights lefts of the focus.
 * 
 * @param f Mapping current lefts to new lefts.
 * @param ctx
 */
modifyRights = \f ctx ->
    setRights(f(rights ctx), ctx);

/**
 * Insert a sibling to the left of the focus. Stays in the current location.
 */
insertLeft = \node ctx ->
    modifyLefts(cons @ node, ctx);

/**
 * Insert a sibling to the right of the focus. Stays in the current location.
 */
insertRight = \node ctx ->
    modifyRights(cons @ node, ctx);

/**
 * Insert a left child for the focus. Stays in the current location.
 */
insertChild = \node ctx ->
    ?hasChildren ctx
        :ctx
            |> down
            |> insertLeft @ node
            |> up
        :replace(
            construct(ctx, extract ctx, cons(node, NIL)).focus,
            ctx);

/**
 * Insert a child at the right for the focus. Stays in current location.
 */
appendChild := \node, ctx ->
    ?hasChildren ctx
        :ctx
            |> down
            |> rightmost
            |> insertRight @ node
            |> up
        :insertChild(node, ctx);

/* Context editing
 ******************************************************************************/
/**
 * Treat the current node as the root of the zipper.
 */
detach := \ctx ->
    setLoc(ctx,
        Loc.empty.setFocus(new Focus(extract ctx)));

/* Zipper
 ******************************************************************************/
/**
 * Create a generic zipper.
 * 
 * @param children Maps node to a stream of its children.
 * @param constructNode Maps a base node a node and a stream of its children,
 * to the base node with these children
 * @param focus Starting point and current context for the zipper.
 */
zipper := \children, constructNode, focus ->
    new Context(
        Loc.empty.setFocus(new Focus(focus)),
        children,
        constructNode);

}